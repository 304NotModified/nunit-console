<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

<description>
**************************************************************************
* This script is used to build, deploy, test and package NUnit.          * 
*                                                                        *
* In order to test the console, engine and framework together, they      *
* are all built using .NET 3.5. This is not the normal build used for    *
* packaging the engine, so it must also be tested using under .NET 1.1   *
* using its own build script. The framework must be tested under all     *
* the runtimes it supports using its own build script.                   *
*                                                                        *
* The actual building and deployment steps are delegated to the scripts  *
* for the individual components: Framework, Engine and Console.          *
*                                                                        *
* Dependencies:                                                          *
*                                                                        *
*   The individual component source projects must be available. The      *
*   following scripts are invoked:                                       *
*        NUnitConsole.build                                              *
*        NUnitEngine.build                                               *
*        NUnitFramework.build                                            *
*                                                                        *
*   The script requires the NAnt 0.91 release or a later version.        *
*                                                                        *
*   To build the windows installer, you must be running on Windows.      *
*   WiX 3.0 and the WiX tasks for NAnt are required. For a standard WiX  *
*   install, the script should be able to find WiX automatically. If     *
*   this doesn't work, you should set the environment variable WIX       *
*   or the property 'wix.dir' to the path where WiX is installed.        *
*                                                                        *
*   PartCover is required to run the 'test-coverage' target.             *
*                                                                        *
* NOTE: Packaging targets are still under development.                   *
*                                                                        *
**************************************************************************
</description>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit Package Version - Three digits -->
  <property name="package.version" value="2.9.6"/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the same as the package version, 
       but may differ when we are in alpha or beta. -->
  <property name="nominal.version" value="2.9.6" />

  <!-- Package Configuration (Release, Alpha, Beta, etc.) -->
  <property name="package.configuration" value=""/>
  
  <!-- Base name for packages - add suffix for Alpha, Beta, RC -->
  <property name="package.name" 
      value="${project.name}-${package.version}"/>

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-4.0,net-3.5,net-2.0,mono-4.0,mono-3.5,mono-2.0,netcf-3.5,netcf-2.0,netcf-1.0"/>

  <!-- Set default warning level for compiles -->
  <property name="warn" value="4" unless="${property::exists('warn')}"/>

<!-- ***************************************************************** -->
<!-- *********          Define Project Directories           ********* -->
<!-- ***************************************************************** -->

  <!-- Project base dir is nant project base dir -->
  <property name="project.base.dir"
    value="${project::get-base-directory()}"/>

  <!-- Other directories are derived from base dir -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.src.dir"
    value="${path::combine(project.base.dir, 'src')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.samples.dir"
    value="${path::combine(project.base.dir,'samples')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'tools')}"/>
  <property name="project.lib.dir"
    value="${path::combine(project.base.dir,'lib')}"/>
  <property name="project.install.dir"
    value="${path::combine(project.base.dir, 'install')}"/>
  <property name="common.deploy.dir"
    value="${path::combine(project.base.dir, 'deploy')}"/>


<!-- ***************************************************************** -->
<!-- *********         Define Packaging Directories          ********* -->
<!-- ***************************************************************** -->

  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.lib.dir" 
    value="${path::combine(package.working.dir,'lib')}"/>
  <property name="package.tools.dir"
    value="${path::combine(package.working.dir,'tools')}"/>
  <property name="package.install.dir"
    value="${path::combine(package.working.dir,'install')}"/>

<!-- ***************************************************************** -->
<!-- *********        Set Default Build Configuration        ********* -->
<!-- ***************************************************************** -->

  <call target="set-debug-build-config"/>

<!-- ***************************************************************** -->
<!-- *********       Set Default Runtime Configuration       ********* -->
<!-- ***************************************************************** -->

  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">

    <!-- NOTE: sdk-exists causes an error if the framework is not installed! -->
    <if test="${framework::exists( framework )}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
    </if>

  </foreach>

  <property name="runtime.config" value="${default.runtime}"/>
 
<!-- ***************************************************************** -->
<!-- In the optional local.settings.include file, installations may    -->
<!-- set properties to override the location of external tools.        -->
<!-- ***************************************************************** -->

  <include buildfile="local.settings.include" failonerror="false"/>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" depends="set-debug-build-config"
    description="Set config to debug for commands that follow"/>

  <target name="release" depends="set-release-build-config"
    description="Set config to release for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean"
      description="Removes output created by the current build config">

    <nant target="clean-all" buildfile="NUnitFramework/NUnitFramework.build" />
    <nant target="clean" buildfile="NUnitEngine/NUnitEngine.build" />
    <nant target="clean" buildfile="NUnitConsole/NUnitConsole.build" />

  </target>

  <target name="clean-package-dir">

        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***              Targets that perform builds                  *** -->
<!-- ***************************************************************** -->

  <target name="build" depends="framework,engine,console"
    description="Build everything, for current config"/>

  <target name="framework" description="Build the NUnit Framework and update references">

    <nant target="build" buildfile="NUnitFramework/NUnitFramework.build" />

    <copy todir="NUnitEngine/lib">
      <fileset basedir="NUnitFramework/build/net/3.5/${build.config}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.framework.pdb"/>
      </fileset>
    </copy>

    <copy todir="NUnitConsole/lib">
      <fileset basedir="NUnitFramework/build/net/3.5/${build.config}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.framework.pdb"/>
      </fileset>
    </copy>

  </target>

  <target name="engine" description="Build the NUnit Engine and update references">

    <nant target="build" buildfile="NUnitEngine/NUnitEngine.build" />

    <copy todir="NUnitConsole/lib">
      <fileset basedir="NUnitEngine/build/${build.config}">
        <include name="nunit.engine.api.dll"/>
        <include name="nunit.engine.api.pdb"/>
        <include name="nunit.engine.dll"/>
        <include name="nunit.engine.pdb"/>
        <include name="nunit-agent.exe"/>
        <include name="nunit-agent.pdb"/>
      </fileset>
    </copy>

  </target>

  <target name="console" description="Build the Console Runner">

    <nant target="build" buildfile="NUnitConsole/NUnitConsole.build" />

  </target>

<!-- ***************************************************************** -->
<!-- ***           Deploy the Build to a common directory          *** -->
<!-- ***************************************************************** -->

  <target name="deploy"
    description="Deploy the build to a common directory">

    <delete dir="${common.deploy.dir}" 
      if="${directory::exists( common.deploy.dir )}"/>

    <nant target="deploy" buildfile="NUnitFramework/NUnitFramework.build"/>
    <nant target="deploy" buildfile="NUnitEngine/NUnitEngine.build"/>
    <nant target="deploy" buildfile="NUnitConsole/NUnitConsole.build"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***                 Targets for running tests                 *** -->
<!-- ***************************************************************** -->

  <target name="test" depends="deploy,run-test"
    description="Build and run tests for the selected config"/>

  <target name="run-test">

    <echo message="*"/>
    <echo message="* Testing the NUnit ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${common.deploy.dir}/NUnitConsole"
          workingdir="${common.deploy.dir}"
          program="nunit-console.exe">

      <arg value="NUnitConsole/nunit-console.tests.dll"/>
      <arg value="NUnitEngine/nunit.engine.tests.dll"/>
      <arg value="NUnitFramework/2.0/nunit.framework.tests.dll"/>
      <arg value="NUnitFramework/3.5/nunit.framework.tests.dll"/>
      <!--<arg value="NUnitFramework/4.0/nunit.framework.tests.dll"/>-->

    </exec>

  </target>

  <target name="test-coverage" depends="build"
    description="Run tests under PartCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <property name="partcover.commandline"
      value='--target direct-runner.exe --target-args "${nunit.commandline}" --include [nunit.framework]* --output TestCoverage-${nant.settings.currentframework}.xml'/>

    <exec basedir="${partcover.dir}"
          workingdir="${current.build.dir}" 
	  program="PartCover.exe" 
          managed="strict"
	  commandline="${partcover.commandline}" />

  </target>

  <target name="test-all"
      description="Build and test all runtimes for current config">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test" />

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- *       Build the NUnit samples - not part of normal build    *** -->
<!-- ***************************************************************** -->

  <!--
  <property name="samples.bin.dir"
    value="${path::combine(project.samples.dir, 'bin')}"/>

  <target name="clean-samples" description="Removes the samples build directory">
    <delete dir="${samples.bin.dir}" />
  </target>

  <target name="build-samples" depends="build"
     description="Build the NUnit samples">
    
    <mkdir dir="${samples.bin.dir}" unless="${directory::exists(samples.bin.dir)}" />

    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.framework.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.dll')}" />

    <nant target="build">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>
  -->

<!-- ***************************************************************** -->
<!-- ***         Targets for packaging the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <target name="package-all"
      description="Create all the standard packages for distribution">
      
    <call target="package-src"/>

    <call target="package-docs"/>

    <foreach item="String" delim="," 
        property="package.config" in="${standard.packages}">

      <call target="set-package-config"/>
      <call target="package"/>

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- ***   Package Using the Currently Selected Package Config     *** -->
<!-- ***      or the default package if none is selected           *** -->
<!-- ***************************************************************** -->

  <target name="package" depends="build-install-image"
      description="Create a package using the current or default config">

    <call target="create-zip"/>
    <call target="create-msi" if="${create.msi}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***                    Package as a zip                       *** -->
<!-- ***************************************************************** -->

  <target name="package-zip" depends="build-install-image,create-zip"
    description="Create zip binary distribution package"/>

<!-- ***************************************************************** -->
<!-- ***                   Package as an msi                       *** -->
<!-- ***************************************************************** -->

  <target name="package-msi" depends="build-install-image,create-msi" 
    description="Build standard msi file and deploy it to the package dir"/>

<!-- ***************************************************************** -->
<!-- ***          Create zip from existing install image           *** -->
<!-- ***************************************************************** -->

  <target name="create-zip">

    <property name="zip.file.name" 
      value="${package.name}-${package.config}${build.suffix}"
      unless="${package.config==default.package.config}"/>
    <property name="zip.file.name" 
      value="${package.name}${build.suffix}"
      if="${package.config==default.package.config}"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${zip.file.name}.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

<!-- ***************************************************************** -->
<!-- ***          Create msi from existing install image           *** -->
<!-- ***************************************************************** -->

  <target name="create-msi">
  
    <fail message="MSI can only be built on the Win32 platform" 
      unless="${platform::is-windows()}"/>

    <!--<fail message="MSI can only be built for a Microsoft runtime" 
      unless="${runtime.platform=='net'}"/>-->

    <fail unless="${property::exists('wix.dir')}">
Unable to locate your WiX installation. Installing WiX normally sets
the WIX environment variable to the directory where WiX is installed. 
If WiX is present, but the WIX variable is not set, you should set it
to the correct location.
    </fail>

    <property name="work.dir"
      value="${package.working.dir}"/>

    <property name="build.suffix" value=""
      unless="${property::exists('build.suffix')}" />
    <property name="msi.file.name"
      value="${package.name}-${package.config}${build.suffix}.msi"
      unless="${package.config==default.package.config}"/>
    <property name="msi.file.name"
      value="${package.name}${build.suffix}.msi"
      if="${package.config==default.package.config}"/>

    <candle out="${work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
        <define name="InstallImage" value="package\NUnit-${package.version}" />
      </defines>
      <sources basedir="${project.install.dir}">
        <include name="**/*.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      extensions="WixUIExtension;WixNetFxExtension">
      <arg line="-b ${project.install.dir}\NUnit.Framework.Installer"/>
      <sources>
        <include name="${work.dir}/*.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>

<!-- ***************************************************************** -->
<!-- ***                  Package source files                     *** -->
<!-- ***************************************************************** -->

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <!--<call target="copy-samples"/>-->
    <call target="copy-src"/>

    <copy file="LICENSE.txt" todir="${package.working.dir}" />

    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-src.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

<!-- ***************************************************************** -->
<!-- ***                      Package docs                         *** -->
<!-- ***************************************************************** -->

  <target name="package-docs" depends="clean-package-dir"
      description="Create a zip of the docs only">

    <call target="copy-docs"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-docs.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
    
  </target>
  
<!-- ***************************************************************** -->
<!-- ***            Helper targets used for packaging              *** -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***            Build install image for a package              *** -->
<!-- ***************************************************************** -->

  <target name="build-install-image" depends="clean-package-dir">

    <call target="copy-top-level-files" />

    <foreach item="String" delim="+"
      property="runtime" in="${package.runtimes}">

      <if test="${framework::exists( runtime )}">
        <if test="${framework::sdk-exists( runtime )}">
          <call target="set-${runtime}-runtime-config"/>
          <call target="copy-bins" />
        </if>
      </if>
    </foreach>

    <call target="copy-docs" />
    <!--<call target="copy-samples" />-->

  </target>

  <target name="copy-top-level-files">

    <copy todir="${package.working.dir}">
      <fileset>
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***           Copy a set of binaries for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-bins" depends="build">

    <mkdir dir="${package.bin.dir}"/>
    <copy todir="${package.bin.dir}/${runtime.config}">
      <fileset basedir="${current.build.dir}">
        <include name="*.dll"/>
        <include name="*.exe"/>
        <include name="*.pdb"/>
        <include name="nunit.framework.xml"/>
        <include name="nunitlite.xml"/>
      </fileset>
    </copy>

  </target>
  
<!-- ***************************************************************** -->
<!-- ***           Copy the documentation for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-docs">
    <mkdir dir="${package.doc.dir}"/>
    <copy todir="${package.doc.dir}">
      <fileset basedir="${project.doc.dir}">
        <include name="*.html"/>
	<include name="nunit.css"/>
        <include name="codeFuncs.js"/>
        <include name="favicon.ico"/>
	<include name="files/*"/>
	<include name="img/*"/>
        <exclude name="img/thumbs.db"/>
      </fileset>
    </copy>
  </target>

<!-- ***************************************************************** -->
<!-- ***            Copy sample programs for a package             *** -->
<!-- ***************************************************************** -->

<!--
  <target name="copy-samples">

    <mkdir dir="${package.samples.dir}"/>

    <copy todir="${package.samples.dir}">
      <fileset basedir="${project.samples.dir}">
        <include name="ReadMe.txt" />
        <include name="samples.common" />
        <include name="csharp/CSharp.sln" />
        <include name="jsharp/jsharp.sln" />
        <include name="vb/vb-samples.sln" />
        <include name="cpp/managed/managed-cpp.sln" />
        <include name="cpp/cpp-cli/cpp-cli.sln" />
        <include name="Extensibility/Core/CoreExtensibility.sln" />
        <include name="Extensibility/Core/Install.bat" />
      </fileset>
    </copy>

    <nant target="package">
      <buildfiles refid="sample.buildfiles"  failonerror="true" />
    </nant>

  </target>
-->

<!-- ***************************************************************** -->
<!-- ***            Copy the source code for a package             *** -->
<!-- ***************************************************************** -->

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <copy todir="${package.working.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
        <include name="nunit.build"/>
        <include name="nunit.common.include"/>
        <include name="nunit.snk"/>
        <include name="src/CommonAssemblyInfo.cs"/>
        <include name="install/NUnit.Installer.sln"/>
        <include name="install/NUnit.Framework.Installer/*.wixproj"/>
        <include name="install/NUnit.Framework.Installer/*.wxs"/>
        <include name="install/NUnit.Framework.Installer/*.wxi"/>
        <include name="install/NUnit.Framework.Installer/License.rtf"/>
      </fileset>
    </copy>

    <nant target="package" inheritrefs="true">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <mkdir dir="${package.solutions.dir}" />

    <copy todir="${package.solutions.dir}">
      <fileset basedir="${project.solutions.dir}">
        <include name="**/NUnitFramework.sln"/>
        <include name="**/nunit.framework/nunit.snk"/>
        <include name="**/nunit.framework/nunit.framework.csproj"/>
        <include name="**/nunit.framework.tests/nunit.framework.tests.csproj"/>
        <include name="**/nunitlite/nunit.snk"/>
        <include name="**/nunitlite/nunitlite.csproj"/>
        <include name="**/nunitlite.tests/nunitlite.tests.csproj"/>
        <include name="**/test-assembly/test-assembly.csproj"/>
        <include name="**/direct-runner/direct-runner.csproj"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config" description="Set the build config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
        dynamic="true"/>
    <property name="build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
    <property name="build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ****** Patternsets and Filesets Used by Various Targets  ******** -->
<!-- ***************************************************************** -->

  <fileset id="project.buildfiles" basedir="${project.src.dir}">

    <!-- Framework -->
    <include name="framework/nunit.framework.build" />
    <!-- Framework Tests -->
    <include name="tests/nunit.framework.tests.build" />
    <!-- Test Data -->
    <include name="test-assembly/test-assembly.build" />
    <!-- Test Runner -->
    <include name="runner/direct-runner.build" />
    <!-- Mock Assembly -->
    <include name="mock-assembly/mock-assembly.build" />

  </fileset>

  <!-- Files to be copied to source directories -->
  <fileset id="source-files" >
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.config" />
        <include name="**/*.build" />
        <include name="**/*.cs" />
        <include name="**/*.xsd" />
        <include name="**/*.xslt" />
        <include name="**/*.resx" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.ico" />
        <include name="**/*.txt" />
        <include name="**/resources/*" />

        <exclude name="**/CVS/**" />
        <exclude name="**/bin/**" />
        <exclude name="**/obj/**" />
        <exclude name="**/Debug/**" />
        <exclude name="**/Release/**" />
  </fileset>

</project>
