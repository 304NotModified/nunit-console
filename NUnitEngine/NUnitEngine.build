<?xml version="1.0"?>
<project name="NUnitEngine" default="build" basedir=".">

<description>
**************************************************************************
* This script is used to build the NUnit Test Engine and it's tests.     *
*                                                                        *
* Dependencies:                                                          *
*                                                                        *
*   The engine is built using .NET 1.1 or Mono 1.0 profile and can be    *
*   used with any version of .NET or Mono.                               *
*                                                                        *
*   The script requires the NAnt 0.90 release or a later version.        *
*                                                                        *
*   PartCover is required to run the 'test-coverage' target.             *
*                                                                        *
**************************************************************************
</description>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnitEngine"/>

  <!-- NUnit Package Version - Three digits -->
  <property name="package.version" value="2.9.5"/>

  <!-- Package Configuration (Release, Alpha, Beta, etc.) -->
  <property name="package.configuration" value=""/>
  
  <!-- Base name for packages - add suffix for Alpha, Beta, RC -->
  <property name="package.name" 
      value="${project.name}-${package.version}"/>

  <!-- Set default warning level for compiles -->
  <property name="warn" value="4" unless="${property::exists('warn')}"/>

<!-- ***************************************************************** -->
<!-- *********          Define Project Directories           ********* -->
<!-- ***************************************************************** -->

  <!-- Project base dir is nant project base dir -->
  <property name="project.base.dir"
    value="${project::get-base-directory()}"/>

  <!-- Other directories are derived from base dir -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.src.dir"
    value="${path::combine(project.base.dir, 'src')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.lib.dir"
    value="${path::combine(project.base.dir,'lib')}"/>
  <property name="project.deploy.dir"
    value="${path::combine(project.base.dir,'../deploy/NUnitEngine')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'../tools')}"/>
  <property name="partcover.dir"
    value="${path::combine(project.tools.dir, 'PartCover')}"/>

<!-- ***************************************************************** -->
<!-- *********         Define Packaging Directories          ********* -->
<!-- ***************************************************************** -->

  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.lib.dir" 
    value="${path::combine(package.working.dir,'lib')}"/>

<!-- ***************************************************************** -->
<!-- *********        Set Default Build Configuration        ********* -->
<!-- ***************************************************************** -->

  <property name="build.config" value="debug"
    unless="${property::exists('build.config')}"/>
  <call target="set-${build.config}-build-config"/>

<!-- ***************************************************************** -->
<!-- *********         The Engine targets .NET 2.0           ********* -->
<!-- ***************************************************************** -->

  <property name="can.build.net"
  value="${framework::exists('net-2.0') and framework::sdk-exists('net-2.0')}"/>

  <property name="can.build.mono"
  value="${framework::exists('mono-2.0') and framework::sdk-exists('mono-2.0')}"/>

  <fail message="Either the net-2.0 or mono-2.0 runtime is required"
      unless="${can.build.net or can.build.mono}" />

  <property name="nant.settings.currentframework" value= "net-2.0"
      if="${can.build.net}" />

  <property name="nant.settings.currentframework" value= "mono-2.0"
      unless="${can.build.net}" />

<!-- ***************************************************************** -->
<!-- *********      Constants used for running tests      ************ -->
<!-- ***************************************************************** -->

  <!-- Allow setting options at the NAnt command line -->
  <property name="test.options" value="" 
    unless="${property::exists('test.runner.options')}"/>
  <!-- Since the NUnit console runner uses the engine, we run
       tests under the framework direct-runner, which does not
       make use of the engine to run tests. -->
  <property name="test.runner.program"
    value="direct-runner.exe"/>
  <property name="test.runner.args"
    value="nunit.engine.tests.dll ${test.options}"/>

<!-- ***************************************************************** -->
<!-- In the optional local.settings.include file, installations may    -->
<!-- set properties to override the location of external tools.        -->
<!-- ***************************************************************** -->

  <include buildfile="local.settings.include" failonerror="false"/>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" depends="set-debug-build-config"
    description="Set config to debug for commands that follow"/>

  <target name="release" depends="set-release-build-config"
    description="Set config to release for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean"
      description="Removes output for the current build">

    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>

    <delete file="src/GeneratedAssemblyInfo.cs"
      if="${file::exists( 'src/GeneratedAssemblyInfo.cs' )}"/>

  </target>

  <target name="clean-package-dir">

        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***                   Build the Engine                        *** -->
<!-- ***************************************************************** -->

  <target name="build" description="Build nunit.engine">

    <mkdir dir="${current.build.dir}"
      unless="${directory::exists(current.build.dir)}"/>

    <copy todir="${current.build.dir}">
      <fileset basedir="${project.lib.dir}">
        <include name="*"/>
      </fileset>
    </copy>

    <nant target="build">
      <buildfiles refid="engine.buildfiles" failonerror="true" />
    </nant>

  </target>

<!-- ***************************************************************** -->
<!-- ***                   Deploy the Engine                       *** -->
<!-- ***************************************************************** -->

  <target name="deploy" depends="build"
    description="Deploy the current build for testing">

    <delete dir="${project.deploy.dir}" 
      if="${directory::exists( project.deploy.dir )}"/>

    <copy todir="${project.deploy.dir}">
      <fileset basedir="${current.build.dir}">
        <include name="nunit.engine.*" />
        <include name="nunit-agent.*" />
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***                      Run Tests                            *** -->
<!-- ***************************************************************** -->

  <target name="test" depends="build,run-test"
    description="Build and run tests for selected config and runtime"/>

  <target name="run-test">

    <echo message="*"/>
    <echo message="* Testing the NUnitEngine ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}"
          workingdir="${current.build.dir}"
          program="${test.runner.program}"
          commandline="${test.runner.args}" />

  </target>

  <target name="test-coverage" depends="build,run-coverage"
    description="Run tests under PartCover to get coverage results"/>

  <target name="run-coverage">

    <echo message="*"/>
    <echo message="* Starting the NUnitEngine ${build.config} test coverage run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}"
          workingdir="${current.build.dir}" 
	  program="${partcover.dir}/PartCover.exe"
          managed="Strict">

      <arg line='--target "${test.runner.program}"' />
      <arg line='--target-args "${test.runner.args}"' />
      <arg line="--include [nunit.engine]*" />
      <arg line="--include [nunit.engine.api]*" />
      <arg line="--include [nunit-agent]*" />
      <arg line="--output TestCoverage.xml" />

    </exec>

  </target>

<!-- ***************************************************************** -->
<!-- ***            Create All Packages for Distribution           *** -->
<!-- ***************************************************************** -->

  <target name="package-all" 
      depends="package-src,package-docs,package" />
      description="Create standard packages for distribution">

<!-- ***************************************************************** -->
<!-- ***                 Create Binary Package                     *** -->
<!-- ***************************************************************** -->

  <target name="package"
      description="Create a binary package for the current build">

    <call target="clean-package-dir"/>
    <call target="copy-license" />
    <call target="copy-bins" />
    <call target="copy-docs" />

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${package.name}${build.suffix}.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

<!-- ***************************************************************** -->
<!-- ***                  Package Source Files                     *** -->
<!-- ***************************************************************** -->

  <target name="package-src"
    description="Create full source package for developer use">

    <call target="clean-package-dir"/>
    <call target="copy-license" />
    <call target="copy-docs"/>
    <call target="copy-src"/>
    <call target="copy-libs"/>

    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-src.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

<!-- ***************************************************************** -->
<!-- ***                      Package docs                         *** -->
<!-- ***************************************************************** -->

  <target name="package-docs"
      description="Create a zip of the docs only">
<!--
    <call target="clean-package-dir"/>
    <call target="copy-license"/>
    <call target="copy-docs"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-docs.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
 -->   
  </target>
  
<!-- ***************************************************************** -->
<!-- ***            Helper targets used for packaging              *** -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***          Copy License and Notices for a package           *** -->
<!-- ***************************************************************** -->

  <target name="copy-license">

    <copy todir="${package.working.dir}">
      <fileset>
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***           Copy a set of binaries for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-bins" depends="build">

    <mkdir dir="${package.bin.dir}"/>
    <copy todir="${package.bin.dir}">
      <fileset basedir="${current.build.dir}">
        <include name="nunit.*" />
        <include name="nunit-agent.*" />
      </fileset>
    </copy>

  </target>
  
<!-- ***************************************************************** -->
<!-- ***           Copy the documentation for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-docs">
    <mkdir dir="${package.doc.dir}"/>
    <copy todir="${package.doc.dir}">
      <fileset basedir="${project.doc.dir}">
        <include name="*.html"/>
	<include name="nunit.css"/>
        <include name="codeFuncs.js"/>
        <include name="favicon.ico"/>
	<include name="files/*"/>
	<include name="img/*"/>
        <exclude name="img/thumbs.db"/>
      </fileset>
    </copy>
  </target>

<!-- ***************************************************************** -->
<!-- ***            Copy the source code for a package             *** -->
<!-- ***************************************************************** -->

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <copy todir="${package.working.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
        <include name="*.build"/>
        <include name="nunit.snk"/>
        <include name="CommonAssemblyInfo.cs"/>
        <include name="*.sln"/>
      </fileset>
    </copy>

    <nant target="package">
      <buildfiles refid="engine.buildfiles" failonerror="true" />
    </nant>

  </target>

<!-- ***************************************************************** -->
<!-- ***         Copy the libraries for a source package           *** -->
<!-- ***************************************************************** -->

  <target name="copy-libs">

    <mkdir dir="${package.lib.dir}"/>
    <copy todir="${package.lib.dir}">
      <fileset basedir="${project.lib.dir}">
        <include name="*" />
      </fileset>
    </copy>

  </target>
  
<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-debug-build-config">

    <property name="build.config" value="debug"/>
    <property name="current.build.dir" value="${project.build.dir}/debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE"
        dynamic="true"/>
    <property name="build.suffix" value="-dbg"/>

  </target>
	
  <target name="set-release-build-config">

    <property name="build.config" value="release"/>
    <property name="current.build.dir" value="${project.build.dir}/release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE"
	dynamic="true"/>
    <property name="build.suffix" value=""/>

  </target>

<!-- ***************************************************************** -->
<!-- *********           Lower Level Buildfiles            *********** -->
<!-- ***************************************************************** -->

  <fileset id="engine.buildfiles">

    <include name="src/nunit.engine.api/nunit.engine.api.build" />
    <include name="src/nunit.engine/nunit.engine.build" />
    <include name="src/nunit.engine.tests/nunit.engine.tests.build" />
    <include name="src/nunit-agent/nunit-agent.build" />

  </fileset>

</project>
